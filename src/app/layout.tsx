// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }




// "use client";
// import { Inter } from "next/font/google";
// import "./globals.css";
// import { useState, useEffect } from "react";
// import { useRouter, usePathname } from "next/navigation";
// import SessionExpired from "./sessionexpired/page";
// import Cookies from "js-cookie";

// const inter = Inter({ subsets: ["latin"] });

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const [isLoggedIn, setIsLoggedIn] = useState(false);
//   const [sessionExpired, setSessionExpired] = useState<boolean>(false);

//   const router = useRouter();
//   const pathname = usePathname();

//   const getBaseUrl = () => {
//     if (typeof window !== 'undefined') {
//       return `${window.location.protocol}//${window.location.host}/`;
//     }
//     return ''; 
//   };
  
//   const BASE_URL = getBaseUrl();

//   useEffect(() => {
//     if (pathname === `${BASE_URL}login` || pathname === `${BASE_URL}sessionexpierd`) {
//       return;
//     }

//     // Store the current pathname in cookies
//     Cookies.set("lastVisitedUrl", pathname, { path: "/" });

//     const token = Cookies.get("token");
//     const tenantId = Cookies.get("tenantId");

//     if (token && tenantId) {
//       const isTokenValid = validateToken(token);
//       if (isTokenValid) {
//         setIsLoggedIn(true);
//         setSessionExpired(false);
//       } else {
//         setSessionExpired(true);
//         redirectToSessionExpired();
//       }
//     } else {
//       setSessionExpired(true);
//       redirectToSessionExpired();
//     }
//   }, [router, pathname]);

//   const validateToken = (token: string) => {
//     return true; 
//   };

//   const handleSignOut = () => {
//     Cookies.remove("token");
//     Cookies.remove("tenantId");
//     Cookies.remove("lastVisitedUrl");
//     setIsLoggedIn(false);
//     router.push(`${BASE_URL}login`);
//   };

//   const redirectToSessionExpired = () => {
//     router.push(`${BASE_URL}sessionexpierd`);
//   };

//   const redirectToLastVisitedUrl = () => {
//     const lastVisitedUrl = Cookies.get("lastVisitedUrl");
//     if (lastVisitedUrl && lastVisitedUrl !== `${BASE_URL}login` && lastVisitedUrl !== `${BASE_URL}sessionexpierd`) {
//       router.push(lastVisitedUrl);
//     } else {
//       router.push(`${BASE_URL}`);
//     }
//   };

//   useEffect(() => {
//     // After session expired, redirect to the stored URL upon login
//     if (isLoggedIn && sessionExpired) {
//       redirectToLastVisitedUrl();
//     }
//   }, [isLoggedIn, sessionExpired]);

//   const isAuthPage = pathname === `${BASE_URL}login` || pathname === `${BASE_URL}sessionexpierd`;

//   if (sessionExpired && !isAuthPage) {
//     return (
//       <html lang="en">
//         <body className={inter.className}>
//           <SessionExpired />
//         </body>
//       </html>
//     );
//   }

//   return (
//     <html lang="en">
//       <body className={inter.className}>
//         {children}
//       </body>
//     </html>
//   );
// }


"use client";
import { Inter } from "next/font/google";
import "./globals.css";
import { useState, createContext, useContext } from "react";
import { useRouter, usePathname } from "next/navigation";
import SessionExpired from "./sessionexpired/page";
import Cookies from "js-cookie";
import Navbar from '@/Components/Header/Navbar';
import Sidebar from '@/Components/Sidebar/Sidebar';

const inter = Inter({ subsets: ["latin"] });

// Create context for sidebar state
export const SidebarContext = createContext();

// Create a wrapper component for the main content
const MainContentWrapper = ({ children }) => {
  const { isSidebarOpen, isCollapsed } = useContext(SidebarContext);
  
  return (
    <main className={`pt-16 transition-all duration-300 
      ${isSidebarOpen
        ? (isCollapsed ? 'ml-16' : 'ml-64')
        : 'ml-0'}`}>
      {children}
    </main>
  );
};

// Create a layout wrapper that includes Navbar and Sidebar
const LayoutWrapper = ({ children }) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const pathname = usePathname();

  const handleCollapse = () => {
    setIsCollapsed(!isCollapsed);
  };

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  return (
    <SidebarContext.Provider value={{ isSidebarOpen, isCollapsed }}>
      <div className="min-h-screen bg-gray-50">
        <Navbar toggleSidebar={toggleSidebar} />
        <Sidebar
          isOpen={isSidebarOpen}
          isCollapsed={isCollapsed}
          handleCollapse={handleCollapse}
          currentPath={pathname}
        />
        <MainContentWrapper>
          {children}
        </MainContentWrapper>
      </div>
    </SidebarContext.Provider>
  );
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [sessionExpired, setSessionExpired] = useState(false);
  const router = useRouter();
  const pathname = usePathname();

  const getBaseUrl = () => {
    if (typeof window !== 'undefined') {
      return `${window.location.protocol}//${window.location.host}/`;
    }
    return '';
  };

  const BASE_URL = getBaseUrl();

  // ... (keep existing authentication logic)

  const isAuthPage = pathname === `${BASE_URL}login` || pathname === `${BASE_URL}sessionexpierd`;

  if (sessionExpired && !isAuthPage) {
    return (
      <html lang="en">
        <body className={inter.className}>
          <SessionExpired />
        </body>
      </html>
    );
  }

  return (
    <html lang="en">
      <body className={inter.className}>
        {isAuthPage ? (
          children
        ) : (
          <LayoutWrapper>
            {children}
          </LayoutWrapper>
        )}
      </body>
    </html>
  );
}