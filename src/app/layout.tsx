// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }




// "use client";
// import { Inter } from "next/font/google";
// import "./globals.css";
// import { useState, createContext, useContext } from "react";
// import { useRouter, usePathname } from "next/navigation";
// import SessionExpired from "./sessionexpired/page";
// import Cookies from "js-cookie";
// import Navbar from '@/Components/Navigation/Navbar';
// import Sidebar from '@/Components/Sidebar/Sidebar';

// const inter = Inter({ subsets: ["latin"] });

// // Create context for sidebar state
// export const SidebarContext = createContext();

// // Create a wrapper component for the main content
// const MainContentWrapper = ({ children }) => {
//   const { isSidebarOpen, isCollapsed } = useContext(SidebarContext);
  
//   return (
//     <main className={`pt-16 transition-all duration-300 
//       ${isSidebarOpen
//         ? (isCollapsed ? 'ml-16' : 'ml-64')
//         : 'ml-0'}`}>
//       {children}
//     </main>
//   );
// };

// // Create a layout wrapper that includes Navbar and Sidebar
// const LayoutWrapper = ({ children }) => {
//   const [isSidebarOpen, setIsSidebarOpen] = useState(true);
//   const [isCollapsed, setIsCollapsed] = useState(false);
//   const pathname = usePathname();

//   const handleCollapse = () => {
//     setIsCollapsed(!isCollapsed);
//   };

//   const toggleSidebar = () => {
//     setIsSidebarOpen(!isSidebarOpen);
//   };

//   return (
//     <SidebarContext.Provider value={{ isSidebarOpen, isCollapsed }}>
//       <div className="min-h-screen bg-gray-50">
//         <Navbar toggleSidebar={toggleSidebar} />
//         <Sidebar
//           isOpen={isSidebarOpen}
//           isCollapsed={isCollapsed}
//           handleCollapse={handleCollapse}
//         />
//         <MainContentWrapper>
//           {children}
//         </MainContentWrapper>
//       </div>
//     </SidebarContext.Provider>
//   );
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const [isLoggedIn, setIsLoggedIn] = useState(false);
//   const [sessionExpired, setSessionExpired] = useState(false);
//   const router = useRouter();
//   const pathname = usePathname();

//   const getBaseUrl = () => {
//     if (typeof window !== 'undefined') {
//       return `${window.location.protocol}//${window.location.host}/`;
//     }
//     return '';
//   };

//   const BASE_URL = getBaseUrl();

//   const isAuthPage = pathname === `${BASE_URL}login` || pathname === `${BASE_URL}sessionexpierd`;

//   if (sessionExpired && !isAuthPage) {
//     return (
//       <html lang="en">
//         <body className={inter.className}>
//           <SessionExpired />
//         </body>
//       </html>
//     );
//   }

//   return (
//     <html lang="en">
//       <body className={inter.className}>
//         {isAuthPage ? (
//           children
//         ) : (
//           <LayoutWrapper>
//             {children}
//           </LayoutWrapper>
//         )}
//       </body>
//     </html>
//   );
// }


"use client";
import React, { useState, useEffect } from "react";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { useRouter, usePathname } from "next/navigation";
import SessionExpired from "./sessionexpired/page";
import Cookies from "js-cookie";
import Navbar from '@/Components/Navigation/Navbar';
import Sidebar from '@/Components/Sidebar/Sidebar';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const pathname = usePathname();
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [sessionExpired, setSessionExpired] = useState(false);
  const [loading, setLoading] = useState(true);

  const handleCollapse = () => {
    setIsCollapsed(!isCollapsed);
  };

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  // Token validation function
  const validateToken = (token: string) => {
    // Add your token validation logic here
    return true; // Placeholder return
  };

  const handleSignOut = () => {
    // Remove all auth-related cookies
    Cookies.remove('token');
    Cookies.remove('tenantId');
    Cookies.remove('licenseType');
    Cookies.remove('licenseEndDate');
    
    // Update auth states
    setIsLoggedIn(false);
    setSessionExpired(true);
    
    // Redirect to session expired page
    router.push('/sessionexpired');
  };

  useEffect(() => {
    if (pathname === "/login" || pathname === "/sessionexpired") {
      setLoading(false);
      return;
    }

    // Check for token and tenant ID
    const token = Cookies.get("token");
    const tenantId = Cookies.get("tenantId");

    if (token && tenantId) {
      const isTokenValid = validateToken(token);
      if (isTokenValid) {
        setIsLoggedIn(true);
        setSessionExpired(false);
      } else {
        setSessionExpired(true);
        handleSignOut();
      }
    } else {
      setSessionExpired(true);
      handleSignOut();
    }

    setLoading(false);
  }, [pathname]);

  // Base URL helper
  const getBaseUrl = () => {
    if (typeof window !== 'undefined') {
      return `${window.location.protocol}//${window.location.host}/`;
    }
    return '';
  };

  const BASE_URL = getBaseUrl();
  const isAuthPage = pathname === `${BASE_URL}login` || pathname === `${BASE_URL}sessionexpired`;

  // Loading state
  if (loading) {
    return (
      <html lang="en">
        <body className={` ${geistSans.variable} ${geistMono.variable} antialiased`}>
          <div className="flex justify-center items-center h-screen">
            <p>Loading...</p>
          </div>
        </body>
      </html>
    );
  }

  // Session expired state
  if (sessionExpired && !isAuthPage) {
    return (
      <html lang="en">
        <body className={` ${geistSans.variable} ${geistMono.variable} antialiased`}>
          <SessionExpired />
        </body>
      </html>
    );
  }

  return (
    <html lang="en">
      <body className={` ${geistSans.variable} ${geistMono.variable} antialiased`}>
        {isAuthPage ? (
          children
        ) : (
          <div className="h-screen ">
            <Navbar 
              toggleSidebar={toggleSidebar} 
              handleSignOut={handleSignOut} 
            />
            <div className="flex">
              <Sidebar
                isOpen={isSidebarOpen}
                isCollapsed={isCollapsed}
                handleCollapse={handleCollapse}
              />
              <main className={`pt-16 transition-all duration-300 w-full
                ${isSidebarOpen
                  ? (isCollapsed ? 'ml-16' : 'ml-64')
                  : 'ml-0'}`}>
                {children}
              </main>
            </div>
          </div>
        )}
      </body>
    </html>
  );
}